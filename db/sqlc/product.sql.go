// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package db

import (
	"context"
)

const changeProductName = `-- name: ChangeProductName :one
UPDATE products 
SET name = $1
WHERE id = $2 AND is_active = true
RETURNING id, name
`

type ChangeProductNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

type ChangeProductNameRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ChangeProductName(ctx context.Context, arg ChangeProductNameParams) (ChangeProductNameRow, error) {
	row := q.db.QueryRowContext(ctx, changeProductName, arg.Name, arg.ID)
	var i ChangeProductNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    account_name,
    name    
) VALUES (
    $1, $2
) RETURNING id, name
`

type CreateProductParams struct {
	AccountName string `json:"account_name"`
	Name        string `json:"name"`
}

type CreateProductRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (CreateProductRow, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.AccountName, arg.Name)
	var i CreateProductRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products 
SET is_active = false
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name 
FROM products
WHERE account_name = $1 AND is_active = true
LIMIT $2
OFFSET $3
`

type GetProductsParams struct {
	AccountName string `json:"account_name"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

type GetProductsRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, arg.AccountName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
