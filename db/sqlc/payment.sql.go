// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payment.sql

package db

import (
	"context"
)

const changePaymentName = `-- name: ChangePaymentName :one
UPDATE payments 
SET name = $1
WHERE id = $2 AND is_active = true
RETURNING id, name
`

type ChangePaymentNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

type ChangePaymentNameRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ChangePaymentName(ctx context.Context, arg ChangePaymentNameParams) (ChangePaymentNameRow, error) {
	row := q.db.QueryRowContext(ctx, changePaymentName, arg.Name, arg.ID)
	var i ChangePaymentNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    account_name,
    name    
) VALUES (
    $1, $2
) RETURNING id, name
`

type CreatePaymentParams struct {
	AccountName string `json:"account_name"`
	Name        string `json:"name"`
}

type CreatePaymentRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (CreatePaymentRow, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.AccountName, arg.Name)
	var i CreatePaymentRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
UPDATE payments 
SET is_active = false
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayments = `-- name: GetPayments :many
SELECT id, name 
FROM payments
WHERE account_name = $1 AND is_active = true
LIMIT $2
OFFSET $3
`

type GetPaymentsParams struct {
	AccountName string `json:"account_name"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

type GetPaymentsRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetPayments(ctx context.Context, arg GetPaymentsParams) ([]GetPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPayments, arg.AccountName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaymentsRow
	for rows.Next() {
		var i GetPaymentsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
